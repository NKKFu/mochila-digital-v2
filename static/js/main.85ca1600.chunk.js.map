{"version":3,"sources":["serviceWorker.ts","Components/Header/index.tsx","Components/ContentLibrary/index.tsx","pages/Home/index.tsx","Components/BackButton/index.tsx","pages/Explore/index.tsx","pages/Content/index.tsx","pages/Configuration/index.tsx","pages/ExploreSchool/index.tsx","styles/global.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","StyledHeader","styled","div","Header","useState","username","SetUsername","useEffect","localUsername","localStorage","getItem","role","aria-label","Task","Link","ContentLibrary","Container","Backbutton","span","Explore","Contents","SetContent","history","useHistory","storedItems","contentsFromLocalStorage","JSON","parse","length","map","task","index","key","to","title","description","size","className","onClick","goBack","ContentContainer","Content","props","ContentIndex","useRouteMatch","params","content","taskContent","Number","parseInt","style","margin","escapeHtml","source","Configuration","IPAdress","SetIPAdress","currentIPAdress","currentUsername","value","type","placeholder","onChange","newValue","target","setItem","ExploreSchool","contents","response","SetResponse","schoolIPAdress","axios","get","responseFromAxios","fetchedContents","data","err","GlobalStyle","createGlobalStyle","ReactDOM","render","basename","process","path","exact","component","schoolContent","Tasks","SetTasks","schoolIP","stringify","storageContent","newContentArray","slice","forEach","document","getElementById","URL","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.85ca1600.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst StyledHeader = styled.div`\r\n    display: flex;\r\n    background-color: #A5DEFF;\r\n    color: #fff;\r\n    padding: 30px 20px;\r\n    max-height: 20vh;\r\n    border-radius: 0 0 20px 20px;\r\n\r\n    h1, h3 {\r\n        font-weight: 500;\r\n\r\n        b {\r\n            color: #4ABFB8;\r\n        }\r\n    }\r\n\r\n    span {\r\n        margin: auto 0 auto auto;\r\n        font-size: 40px;\r\n    }\r\n`;\r\n\r\nconst Header = () => {\r\n    const [username, SetUsername] = useState('');\r\n\r\n    useEffect(() => {\r\n        const localUsername = localStorage.getItem('@Mochila:username');\r\n        SetUsername(localUsername ? localUsername : 'aluno');\r\n    }, []);\r\n\r\n    return (\r\n        <StyledHeader>\r\n            <div>\r\n                <h1>Oi, {username}</h1>\r\n                <h3>Bem vindo ao <b>Mochila Digital</b></h3>\r\n            </div>\r\n            <span role=\"img\" aria-label=\"Mochila\">🎒</span>\r\n        </StyledHeader>\r\n    );\r\n}\r\n\r\n\r\nexport default Header;","import styled from 'styled-components'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const Task = styled(Link)`\r\n    text-decoration: none;\r\n    color: #4a4a4a;\r\n    display: flex;\r\n    background-color: #e8e8e8;\r\n    border-radius: 5px;\r\n    \r\n    div {\r\n        padding: 20px 0 20px 20px;\r\n        width: 80%;\r\n    }\r\n\r\n    svg {\r\n        margin: auto;\r\n        color: #949494;\r\n    }\r\n`;\r\n\r\n\r\nconst ContentLibrary = styled.div`\r\n    margin: 20px;\r\n\r\n    & + div {\r\n        margin-top: 50px;\r\n    }\r\n\r\n    header {\r\n        display: flex;\r\n        \r\n        h4 {\r\n            color: #B0B0B0;\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        .explore-button {\r\n            text-decoration: none;\r\n            font-weight: bold;\r\n            color: #7FE8EF;\r\n            margin-left: auto;\r\n        }\r\n    }\r\n\r\n    a {\r\n        & + a {\r\n            margin-top: 20px;\r\n        }\r\n    }\r\n\r\n    .error {\r\n        display: flex;\r\n        flex-direction: column;\r\n        background-color: #e8e8e8;\r\n        color: #B0B0B0;\r\n        height: 256px;\r\n        border-radius: 5px;\r\n        text-align: center;\r\n\r\n        p {\r\n            margin: auto;\r\n        \r\n            a { \r\n                color: #6e8ab8;\r\n                text-decoration: none;\r\n                font-weight: bolder;\r\n                margin: 0 auto auto auto;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default ContentLibrary;","import React, { useEffect, useState } from 'react'\r\n\r\nimport axios from 'axios'\r\n\r\nimport Header from '../../Components/Header'\r\nimport ContentLibrary, { Task } from '../../Components/ContentLibrary'\r\nimport { MdAssignmentReturned } from 'react-icons/md'\r\n\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Container = styled.div``;\r\n\r\ninterface Content {\r\n    title: string;\r\n    description: string;\r\n    content?: string;\r\n}\r\n\r\nexport const Home = () => {\r\n    const [schoolContent, SetSchoolContent] = useState([]);\r\n    const [Tasks, SetTasks] = useState<Content[]>([]);\r\n\r\n    useEffect(() => {\r\n        // Fetch content from school content\r\n        const schoolIP = localStorage.getItem('@Mochila:directIP');\r\n\r\n        if (schoolIP) {\r\n            axios.get(schoolIP).then((response) => {\r\n                console.log(\r\n                    response.data\r\n                )\r\n\r\n            });\r\n        }\r\n\r\n        // TODO -> Remove this code [Test only]\r\n        localStorage.setItem('@Mochila:storedContent', JSON.stringify([\r\n        ] as Content[]));\r\n\r\n        // Fetch content from user storage\r\n        const storageContent = localStorage.getItem('@Mochila:storedContent');\r\n\r\n        if (storageContent) {\r\n            const content = JSON.parse(storageContent) as Content[];\r\n            const newContentArray = content\r\n                .map(({ content, ...keepAttrs }) => keepAttrs)\r\n                .slice(0, 1);\r\n\r\n            SetTasks(newContentArray);\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <Container>\r\n            <Header />\r\n            <ContentLibrary>\r\n                <header>\r\n                    <h4>Sua biblioteca</h4>\r\n                    <Link to=\"explore\" className=\"explore-button\">Ver Todos</Link>\r\n                </header>\r\n                {\r\n                    Tasks.length > 0 ?\r\n                        Tasks.forEach((task, index) => {\r\n                            return (\r\n                                <Task key={index} to={`content/${index}`}>\r\n                                    <div>\r\n                                        <h2>{task.title}</h2>\r\n                                        <p>{task.description}</p>\r\n                                    </div>\r\n                                    <MdAssignmentReturned size={50} />\r\n                                </Task>\r\n                            )\r\n                        })\r\n                        :\r\n                        <div className=\"error\">\r\n                            <p>Nenhum conteúdo foi armazenado ainda</p>\r\n                        </div>\r\n                }\r\n            </ContentLibrary>\r\n            <ContentLibrary>\r\n                <header>\r\n                    <h4>O que há na sua escola</h4>\r\n                    {schoolContent && <Link to=\"exploreschool\" className=\"explore-button\">Explorar</Link>}\r\n                </header>\r\n                <div className=\"error\">\r\n                    <p>Não foi possível carregar os conteúdos<br />\r\n                    Você está perto de sua escola?<br />\r\n                        <Link to=\"configuration\">Configurar acesso</Link>\r\n                    </p>\r\n                </div>\r\n            </ContentLibrary>\r\n        </Container >\r\n    );\r\n}","import styled from 'styled-components'\r\n\r\nconst Backbutton = styled.span`\r\n    background-color: red;\r\n    color: white;\r\n    position: fixed;\r\n    bottom: 0;\r\n    width: 100vw;\r\n    height: 80px;\r\n    text-align: center;\r\n    display: flex;\r\n    text-decoration: none;\r\n\r\n    p {\r\n        font-weight: bold;\r\n        margin: auto;\r\n    }\r\n`;\r\n\r\nexport default Backbutton;","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Backbutton from '../../Components/BackButton';\r\nimport ContentLibrary, { Task } from '../../Components/ContentLibrary';\r\nimport { MdAssignmentReturn } from 'react-icons/md';\r\n\r\ninterface ContentParams {\r\n    content: string;\r\n}\r\n\r\ninterface Content {\r\n    title: string;\r\n    description: string;\r\n    content?: string;\r\n}\r\n\r\nconst Explore: React.FC = () => {\r\n    const [Contents, SetContent] = useState<Content[]>([]);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const storedItems = localStorage.getItem('@Mochila:NKKFu');\r\n\r\n        if (storedItems) {\r\n            const contentsFromLocalStorage = JSON.parse(storedItems) as Content[];\r\n            SetContent(contentsFromLocalStorage);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <ContentLibrary>\r\n                {\r\n                    Contents.length > 0 ?\r\n                        Contents.map((task, index) =>\r\n                            <Task key={index} to={`content/${index}`}>\r\n                                <div>\r\n                                    <h2>{task.title}</h2>\r\n                                    <p>{task.description}</p>\r\n                                </div>\r\n                                <MdAssignmentReturn size={50} />\r\n                            </Task>\r\n                        )\r\n                        :\r\n                        <div className=\"error\">\r\n                            <p>Nenhum conteúdo foi armazenado ainda</p>\r\n                        </div>\r\n                }\r\n            </ContentLibrary>\r\n            <Backbutton onClick={() => history.goBack()}>\r\n                <p>VOLTAR</p>\r\n            </Backbutton>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Explore;","import React from 'react';\r\nimport { useRouteMatch, useHistory } from 'react-router-dom';\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport ReactMarkdown from 'react-markdown/with-html';\r\nimport Backbutton from '../../Components/BackButton';\r\n\r\ninterface ContentParams {\r\n    content: string;\r\n}\r\n\r\ninterface Content {\r\n    title: string;\r\n    description: string;\r\n    content?: string;\r\n}\r\n\r\nconst ContentContainer = styled.div`\r\n    padding: 20px;\r\n`;\r\n\r\nconst Content: React.FC = (props) => {\r\n    const history = useHistory();\r\n\r\n    const { params } = useRouteMatch<ContentParams>();\r\n    const { content: ContentIndex } = params;\r\n\r\n    const storedItems = localStorage.getItem('@Mochila:NKKFu');\r\n\r\n    if (!storedItems)\r\n        return <h1>Error on load</h1>\r\n\r\n    const taskContents = JSON.parse(storedItems) as Content[];\r\n    const taskContent = taskContents[Number.parseInt(ContentIndex)];\r\n\r\n    return (\r\n        <>\r\n            <ContentContainer>\r\n                <h1>{taskContent.title}</h1>\r\n                <hr style={{ margin: \"20px 0\"}} />\r\n                <ReactMarkdown escapeHtml={false} source={taskContent.content}></ReactMarkdown>\r\n            </ContentContainer>\r\n            <Backbutton onClick={() => history.goBack()}>\r\n                <p>VOLTAR</p>\r\n            </Backbutton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Content;","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport Backbutton from '../../Components/BackButton';\r\n\r\nconst Container = styled.div`\r\n    div {\r\n        padding: 20px;\r\n\r\n        input {\r\n            width: 100%;\r\n            border: 0;\r\n            border-radius: 5px;\r\n            padding: 10px;\r\n            margin-bottom: 5px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        p {\r\n            font-size: 14px;\r\n            color: #b5b5b5;\r\n            font-weight: bolder;    \r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        button {\r\n            margin-top: 50px;\r\n            font-size: 18px;\r\n            background-color: #33d62b;\r\n            color: #0b6b06;\r\n            font-weight: bolder;\r\n            padding: 10px 20px;\r\n            border: 0;\r\n            border-radius: 5px;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Configuration: React.FC = () => {\r\n    const [IPAdress, SetIPAdress] = useState('');\r\n    const [username, SetUsername] = useState('aluno');\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const currentIPAdress = localStorage.getItem('@Mochila:IPAdress');\r\n        const currentUsername = localStorage.getItem('@Mochila:username');\r\n\r\n        console.log(currentIPAdress);\r\n        \r\n\r\n        if (currentIPAdress)\r\n            SetIPAdress(currentIPAdress);\r\n\r\n        if (currentUsername)\r\n            SetUsername(currentUsername);\r\n    }, []);\r\n\r\n    function handleUpdateConfiguration() {\r\n        localStorage.setItem('@Mochila:IPAdress', IPAdress);\r\n        localStorage.setItem('@Mochila:username', username);\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div>\r\n                <input value={IPAdress} type=\"text\" placeholder=\"IP escolar..\" onChange={(newValue) => SetIPAdress(newValue.target.value)} />\r\n                <p>Não mude por conta própria, peça autorização de sua escola</p>\r\n\r\n                <input value={username} type=\"text\" placeholder=\"Seu nome aqui..\" onChange={(newValue) => SetUsername(newValue.target.value)} />\r\n                <p>Como você quer ser chamado?</p>\r\n\r\n                <button onClick={handleUpdateConfiguration}>Salvar configurações</button>\r\n            </div>\r\n\r\n            <Backbutton onClick={() => history.goBack()}>\r\n                <p>VOLTAR</p>\r\n            </Backbutton>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Configuration;","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components'\r\n\r\nimport axios from 'axios'\r\n\r\nimport Backbutton from '../../Components/BackButton';\r\nimport ContentLibrary, { Task } from '../../Components/ContentLibrary';\r\nimport { MdAssignmentReturn, MdAssignmentReturned } from 'react-icons/md';\r\n\r\ninterface ContentParams {\r\n    content: string;\r\n}\r\n\r\ninterface Content {\r\n    title: string;\r\n    description: string;\r\n    content?: string;\r\n}\r\n\r\nconst Container = styled.div`\r\n    .alert-tab {\r\n        margin: 20px;\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\nconst ExploreSchool: React.FC = () => {\r\n    const [contents, SetContent] = useState<Content[]>([]);\r\n    const [response, SetResponse] = useState('pending');\r\n\r\n    const history = useHistory();\r\n\r\n    // TODO -> Adicionar função de explorar escola\r\n\r\n    useEffect(() => {\r\n        const schoolIPAdress = localStorage.getItem('@Mochila:IPAdress');\r\n\r\n        if (!schoolIPAdress) {\r\n            SetResponse('error');\r\n            return;\r\n        }\r\n\r\n        axios.get(schoolIPAdress).then((responseFromAxios) => {\r\n            const fetchedContents = responseFromAxios.data as Content[];\r\n            SetResponse('sucess');\r\n            SetContent(fetchedContents);\r\n        }).catch(err => {\r\n            console.error(err);\r\n            SetResponse('error');\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"alert-tab\">\r\n                {response === 'pending' && <p>Carregando..</p>}\r\n                {response === 'error' && <p>Não foi possível carregar os conteúdos <br /> Você está perto de sua escola?</p>}\r\n                {response === 'success' && <p>Clique nos conteúdos que você<br /> quiser adicionar à sua bibliota</p>}\r\n            </div>\r\n\r\n            <ContentLibrary>\r\n                {\r\n                    contents.length > 0 ?\r\n                        contents.map((task, index) => {\r\n                            return (\r\n                                <Task key={index} to={`content/${index}`}>\r\n                                    <div>\r\n                                        <h2>{task.title}</h2>\r\n                                        <p>{task.description}</p>\r\n                                    </div>\r\n                                    <MdAssignmentReturned size={50} />\r\n                                </Task>\r\n                            )\r\n                        })\r\n                        :\r\n                        <div className=\"error\">\r\n                            <p>Nenhum conteúdo foi encontrado</p>\r\n                        </div>\r\n                }\r\n            </ContentLibrary>\r\n\r\n            <Backbutton onClick={() => history.goBack()}>\r\n                <p>VOLTAR</p>\r\n            </Backbutton>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ExploreSchool;","import { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    * { \r\n        margin: 0;\r\n        padding: 0;\r\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    body { \r\n        background-color: #f5f5f5;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { Home } from './pages/Home';\nimport Explore from './pages/Explore';\nimport Content from './pages/Content';\nimport Configuration from './pages/Configuration';\nimport ExploreSchool from './pages/ExploreSchool';\n\nimport GlobalStyles from './styles/global'\n\nReactDOM.render(\n\t<>\n\t\t<BrowserRouter basename={process.env.PUBLIC_URL}>\n\t\t\t<Switch>\n\t\t\t\t{/* É necessário utilizar process.env.PUBLIC_URL para o Github pages poder entender a rota */ }\n\t\t\t\t<Route path={'/'} exact component={Home} />\n\t\t\t\t<Route path={'/explore'} exact component={Explore} />\n\t\t\t\t<Route path={'/exploreschool'} exact component={ExploreSchool} />\n\t\t\t\t<Route path={'/configuration'} exact component={Configuration} />\n\t\t\t\t<Route path={'/content/:content+'} exact component={Content} />\n\t\t\t</Switch>\n\t\t</ BrowserRouter>\n\t\t<GlobalStyles />\n\t</>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}